import logging
import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, ParseMode, ReplyKeyboardRemove
from telegram.ext import (
    CallbackContext, ConversationHandler, CommandHandler, 
    MessageHandler, CallbackQueryHandler, Filters
)
from models import User, ServiceRequest, RequestStatus
from config import ADMIN_IDS, MILEAGE_ADMIN_ID
from data_store import data_store

# Define conversation states
(
    START, REGISTER, REGISTER_NAME, REGISTER_SURNAME, MAIN_MENU, FORM_CAR_BRAND,
    FORM_CAR_MODEL, FORM_CAR_YEAR, FORM_LICENSE_PLATE, FORM_MILEAGE, 
    FORM_REQUESTED_WORK, FORM_PREFERRED_DATE, FORM_PHONE, 
    FORM_CONFIRM, MY_REQUESTS, ADMIN_MENU, REQUEST_DETAILS,
    FORM_MODEL_MANUAL, FORM_REAL_NAME, FORM_REAL_SURNAME, ADMIN_NOTE,
    FORM_WORK_TYPE, FORM_WORK_MANUAL, FORM_SELECT_DATE, FORM_PHONE_CHOICE,
    MILEAGE_RESPONSE, MILEAGE_RESPONSE_TEXT  # –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ –ø—Ä–æ–±–µ–≥–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¢–û
) = range(27)

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–∞—Ä–æ–∫ –∏ –º–æ–¥–µ–ª–µ–π –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π - –£–ü–†–û–©–Å–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
# –ö–∞–∂–¥–∞—è –º–∞—Ä–∫–∞ –ø—Ä–æ—Å—Ç–æ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π —Å –ø–æ–ª–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏

# Toyota –º–æ–¥–µ–ª–∏
TOYOTA_MODELS = [
    "Corolla", "Ch-r", "Camry", "Rav4", "Highlander", "Fortuner", "Hilux",
    "Land Cruiser 200", "Land Cruiser 300", "Land Cruiser Prado"
]

# Lexus –º–æ–¥–µ–ª–∏ 
LEXUS_MODELS = [
    "IS", "IS 250", "IS 350",
    "ES 200", "ES 250", "ES 350",
    "GS 300", "GS 350",
    "UX 200", "UX 250h", 
    "NX 200", "NX 200t", "NX 300", "NX 300h",
    "RX 270", "RX 200t", "RX 300", "RX 350", "RX 450h",
    "GX 460", "GX 470", "GX 500",
    "LX 570", "LX 600"
]

# –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏ –≤ –æ–¥–∏–Ω —Å–ª–æ–≤–∞—Ä—å
CAR_BRANDS = {
    "Toyota": TOYOTA_MODELS,
    "Lexus": LEXUS_MODELS
}

# –î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–¥—ã –≤—ã–ø—É—Å–∫–∞
CAR_YEARS = list(range(2006, 2026))

def create_main_menu_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    return ReplyKeyboardMarkup(
        [[KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
        resize_keyboard=True
    )
    
def handle_main_menu_button(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤ –æ–±—ã—á–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ"""
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    return show_main_menu(update, context)

def start(update: Update, context: CallbackContext) -> int:
    """Start the conversation and ask if the user wants to register"""
    user = update.effective_user
    telegram_id = user.id
    
    # Check if user is already registered
    existing_user = data_store.get_user(telegram_id)
    
    if existing_user:
        return show_main_menu(update, context)
    
    update.message.reply_text(
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å –∞–≤—Ç–æ–º–∞—Å—Ç–µ—Ä—Å–∫–æ–π.\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data="register")]
        ])
    )
    
    return START

def register_callback(update: Update, context: CallbackContext) -> int:
    """Handle the registration button click"""
    query = update.callback_query
    query.answer()
    
    query.message.reply_text(
        "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–º –Ω—É–∂–Ω–∞ –≤–∞—à–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
    )
    
    return REGISTER_NAME

def register_name(update: Update, context: CallbackContext) -> int:
    """Save user's first name and ask for surname"""
    first_name = update.message.text.strip()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data['real_first_name'] = first_name
    
    update.message.reply_text(
        f"–°–ø–∞—Å–∏–±–æ, {first_name}! –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:"
    )
    
    return REGISTER_SURNAME

def register_surname(update: Update, context: CallbackContext) -> int:
    """Save user's surname and ask for phone number"""
    last_name = update.message.text.strip()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–º–∏–ª–∏—é –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data['real_last_name'] = last_name
    
    update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
        reply_markup=ReplyKeyboardMarkup(
            [[KeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]],
            one_time_keyboard=True,
            resize_keyboard=True
        )
    )
    
    return REGISTER

def register_phone(update: Update, context: CallbackContext) -> int:
    """Register a new user with their phone number"""
    user = update.effective_user
    contact = update.message.contact
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –∏–∑ Telegram –ø—Ä–æ—Ñ–∏–ª—è
    first_name = context.user_data.get('real_first_name', user.first_name)
    last_name = context.user_data.get('real_last_name', user.last_name)
    
    # Create a new user
    new_user = User(
        telegram_id=user.id,
        username=user.username,
        first_name=first_name,
        last_name=last_name,
        phone=contact.phone_number if contact else update.message.text
    )
    
    data_store.add_user(new_user)
    
    update.message.reply_text(
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, {first_name}! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–µ—Ä–≤–∏—Å–æ–º."
    )
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if 'real_first_name' in context.user_data:
        del context.user_data['real_first_name']
    if 'real_last_name' in context.user_data:
        del context.user_data['real_last_name']
    
    return show_main_menu(update, context)

def show_main_menu(update: Update, context: CallbackContext) -> int:
    """Show the main menu with options"""
    user = update.effective_user
    is_admin = user.id in ADMIN_IDS
    
    buttons = [
        [InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="new_request")],
        [InlineKeyboardButton("üîç –ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data="my_requests")],
    ]
    
    if is_admin:
        buttons.append([InlineKeyboardButton("üë®‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="admin_menu")])
    
    buttons.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    
    # Add the keyboard with Main Menu button
    keyboard = create_main_menu_keyboard()
    
    if hasattr(update, 'callback_query') and update.callback_query:
        update.callback_query.answer()
        update.callback_query.message.edit_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(buttons)
        )
        
        # –ü—Ä–æ—Å—Ç–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        update.callback_query.message.reply_text(
            "üè† –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –º–µ–Ω—é:",
            reply_markup=keyboard
        )
    else:
        update.message.reply_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(buttons)
        )
        
        # –ü—Ä–æ—Å—Ç–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        # –î–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É        
        if not data_store.get_user(update.effective_user.id):
            update.message.reply_text(
                "üè† –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –º–µ–Ω—é:",
                reply_markup=keyboard
            )
    
    return MAIN_MENU

def start_new_request(update: Update, context: CallbackContext) -> int:
    """Start the service request form by showing car brands"""
    query = update.callback_query
    query.answer()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–∞—Ä–∫–∞–º–∏ Toyota –∏ Lexus
    buttons = [
        [InlineKeyboardButton("Lexus", callback_data="brand_Lexus")],
        [InlineKeyboardButton("Toyota", callback_data="brand_Toyota")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    
    query.message.edit_text(
        "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫—É –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:",
        reply_markup=InlineKeyboardMarkup(buttons)
    )
    
    return FORM_CAR_BRAND

def process_car_brand(update: Update, context: CallbackContext) -> int:
    """Process car brand selection and show year selection"""
    query = update.callback_query
    query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–∞—Ä–∫—É –∏–∑ callback_data
    brand_data = query.data.split('_', 1)[1]
    
    # –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ "–î—Ä—É–≥–∞—è –º–∞—Ä–∫–∞" –æ—Ç–∫–ª—é—á–µ–Ω–∞
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–∞—Ä–∫—É
    context.user_data['car_brand'] = brand_data
    
    # –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –≥–æ–¥–∞ –≤—ã–ø—É—Å–∫–∞ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –º–∞—Ä–∫–∏
    query.message.edit_text(
        f"–í—ã–±—Ä–∞–Ω–∞ –º–∞—Ä–∫–∞: {brand_data}\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:",
        reply_markup=InlineKeyboardMarkup(create_year_buttons())
    )
    
    return FORM_CAR_YEAR

def process_car_model_selection(update: Update, context: CallbackContext) -> int:
    """Process car model selection and proceed to license plate entry"""
    query = update.callback_query
    query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –∏–∑ callback_data
    callback_data = query.data.split('_', 1)[1]
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "–î—Ä—É–≥–∞—è –º–æ–¥–µ–ª—å"
    if "other" in callback_data.lower():
        query.message.edit_text(
            f"–í—ã–±—Ä–∞–Ω–∞ –º–∞—Ä–∫–∞: {context.user_data['car_brand']}\n"
            f"–í—ã–±—Ä–∞–Ω –≥–æ–¥: {context.user_data['car_year']}\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:"
        )
        return FORM_MODEL_MANUAL
    
    car_brand = context.user_data['car_brand']
    car_year = context.user_data['car_year']
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º callback_data —Å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è–º–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ –ø—Ä–æ–±–µ–ª—ã
    # –¥–ª—è –º–æ–¥–µ–ª–µ–π —Å –ø—Ä–æ–±–µ–ª–∞–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä "Land_Cruiser_200" -> "Land Cruiser 200"
    selected_model = callback_data.replace("_", " ")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–∞—è –º–æ–¥–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ –º–æ–¥–µ–ª–µ–π –º–∞—Ä–∫–∏
    valid_model = False
    for model in CAR_BRANDS[car_brand]:
        if model.lower() == selected_model.lower():
            selected_model = model  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞
            valid_model = True
            break
    
    if not valid_model:
        # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—à–∏–±–∫–æ–π
        logging.error(f"Model {selected_model} not found in brand {car_brand}")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    context.user_data['car_model'] = f"{car_brand} {selected_model} {car_year} –≥."
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
    query.message.edit_text(
        f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å: {context.user_data['car_model']}\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è:"
    )
    
    return FORM_LICENSE_PLATE

# –£–±–∏—Ä–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é process_car_submodel, —Ç–∞–∫ –∫–∞–∫ —Ç–µ–ø–µ—Ä—å –æ–Ω–∞ –Ω–µ –Ω—É–∂–Ω–∞.
# –í—Å–µ –º–æ–¥–µ–ª–∏ —Ç–µ–ø–µ—Ä—å –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –æ–¥–Ω–æ–º —Å–ø–∏—Å–∫–µ —Å –ø–æ–ª–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏.

def process_model_manual(update: Update, context: CallbackContext) -> int:
    """Process manually entered car model"""
    car_model = update.message.text
    
    # –ï—Å–ª–∏ –±—ã–ª –≤—ã–±—Ä–∞–Ω –≥–æ–¥ –ø–µ—Ä–µ–¥ —Ä—É—á–Ω—ã–º –≤–≤–æ–¥–æ–º –º–æ–¥–µ–ª–∏
    if 'car_brand' in context.user_data and 'car_year' in context.user_data:
        car_brand = context.user_data['car_brand']
        car_year = context.user_data['car_year']
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å —É—á—ë—Ç–æ–º –º–∞—Ä–∫–∏ –∏ –≥–æ–¥–∞
        context.user_data['car_model'] = f"{car_brand} {car_model} {car_year} –≥."
        
        # –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –Ω–æ–º–µ—Ä–∞
        update.message.reply_text(
            f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å: {context.user_data['car_model']}\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è:"
        )
        
        return FORM_LICENSE_PLATE
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä—è–º–æ–π —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ "–¥—Ä—É–≥–∞—è –º–∞—Ä–∫–∞")
        context.user_data['car_model'] = car_model
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –≥–æ–¥–∞
        keyboard = create_main_menu_keyboard()
        
        update.message.reply_text(
            f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å: {car_model}\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:",
            reply_markup=InlineKeyboardMarkup(create_year_buttons())
        )
        
        return FORM_CAR_YEAR

def show_car_year_selection(update: Update, context: CallbackContext) -> int:
    """Show car year selection buttons"""
    query = update.callback_query
    
    query.message.edit_text(
        f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å: {context.user_data['car_model']}\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:",
        reply_markup=InlineKeyboardMarkup(create_year_buttons())
    )
    
    return FORM_CAR_YEAR

def create_year_buttons():
    """Create buttons for year selection"""
    buttons = []
    years_per_row = 4
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≥–æ–¥–∞ –ø–æ 4 –≤ —Ä—è–¥
    for i in range(0, len(CAR_YEARS), years_per_row):
        row = []
        for year in CAR_YEARS[i:i+years_per_row]:
            row.append(InlineKeyboardButton(str(year), callback_data=f"year_{year}"))
        buttons.append(row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="new_request")])
    
    return buttons

def process_car_year(update: Update, context: CallbackContext) -> int:
    """Process car year selection and proceed to model selection"""
    query = update.callback_query
    query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ–¥ –∏–∑ callback_data
    year = query.data.split('_', 1)[1]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ–¥
    context.user_data['car_year'] = year
    
    car_brand = context.user_data['car_brand']
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–∞—Ä–∫–∏
    all_models = CAR_BRANDS[car_brand]
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π
    # –†–∞–∑–º–µ—â–∞–µ–º –º–æ–¥–µ–ª–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–∫–∞—Ö –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    buttons = []
    for model in all_models:
        # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ callback_data –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –¥–ª—è –º–æ–¥–µ–ª–µ–π —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
        model_key = model.replace(" ", "_")
        buttons.append([InlineKeyboardButton(model, callback_data=f"model_{model_key}")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥—Ä—É–≥–æ–π –º–æ–¥–µ–ª–∏
    other_model_text = f"–î—Ä—É–≥–∞—è –º–æ–¥–µ–ª—å {car_brand}"
    buttons.append([InlineKeyboardButton(other_model_text, callback_data="model_other")])
    buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="new_request")])
    
    # –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª–Ω—ã–º —Å–ø–∏—Å–∫–æ–º –º–æ–¥–µ–ª–µ–π
    query.message.edit_text(
        f"–í—ã–±—Ä–∞–Ω–∞ –º–∞—Ä–∫–∞: {car_brand}\n"
        f"–í—ã–±—Ä–∞–Ω –≥–æ–¥: {year}\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è:",
        reply_markup=InlineKeyboardMarkup(buttons)
    )
    
    return FORM_CAR_MODEL

def back_to_date_selection(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã'"""
    query = update.callback_query
    query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø —Ä–∞–±–æ—Ç—ã –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    requested_work = context.user_data.get('requested_work', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã
    now = datetime.datetime.now()
    available_dates = []
    
    # –ù–∞—Ö–æ–¥–∏–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–∏ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
    days_until_next_monday = 7 - now.weekday() if now.weekday() > 0 else 7
    next_monday = now + datetime.timedelta(days=days_until_next_monday)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞—Ç—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 2 –º–µ—Å—è—Ü–∞ (60 –¥–Ω–µ–π), –Ω–∞—á–∏–Ω–∞—è —Å–æ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–∏
    for i in range(60):
        date = next_monday + datetime.timedelta(days=i)
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–±–æ—Ä —Ç–æ–ª—å–∫–æ –≤—Ç–æ—Ä–Ω–∏–∫–æ–º, —Å—Ä–µ–¥–æ–π –∏ —á–µ—Ç–≤–µ—Ä–≥–æ–º
        if date.weekday() in [1, 2, 3]:  # 0 - –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 1 - –≤—Ç–æ—Ä–Ω–∏–∫, ...
            available_dates.append(date)
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –¥–∞—Ç–∞–º–∏
    buttons = []
    dates_per_row = 3
    date_buttons = []
    
    for date in available_dates[:18]:  # –û–≥—Ä–∞–Ω–∏—á–∏–º—Å—è –ø–µ—Ä–≤—ã–º–∏ 18 –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏
        formatted_date = date.strftime("%d.%m")
        day_names = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
        day_name = day_names[date.weekday()]
        button_text = f"{formatted_date} ({day_name})"
        date_key = date.strftime("%d.%m.%Y")
        date_buttons.append(InlineKeyboardButton(button_text, callback_data=f"date_{date_key}"))
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞—Ç—ã –ø–æ 3 –≤ —Ä—è–¥
        if len(date_buttons) == dates_per_row:
            buttons.append(date_buttons)
            date_buttons = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–∞—Ç—ã
    if date_buttons:
        buttons.append(date_buttons)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")])
    
    query.message.edit_text(
        f"–í—ã–±—Ä–∞–Ω —Ç–∏–ø —Ä–∞–±–æ—Ç: {requested_work}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—É—é –¥–∞—Ç—É –≤–∏–∑–∏—Ç–∞ (–≤—Ç–æ—Ä–Ω–∏–∫-—á–µ—Ç–≤–µ—Ä–≥):\n"
        "‚ùó –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ\n"
        "‚ùó –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ –±–ª–∏–∂–∞–π—à–∏–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        reply_markup=InlineKeyboardMarkup(buttons)
    )
    
    return FORM_SELECT_DATE

def process_license_plate(update: Update, context: CallbackContext) -> int:
    """Save license plate and ask for mileage"""
    license_plate = update.message.text
    context.user_data['license_plate'] = license_plate
    
    update.message.reply_text(
        f"–ì–æ—Å. –Ω–æ–º–µ—Ä: {license_plate}\n\n"
        "–£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–±–µ–≥ –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö):"
    )
    
    return FORM_MILEAGE

def process_mileage(update: Update, context: CallbackContext) -> int:
    """Save mileage and ask for requested work"""
    try:
        mileage = int(update.message.text)
        context.user_data['mileage'] = mileage
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–∞–±–æ—Ç
        buttons = [
            [InlineKeyboardButton("üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ", callback_data="work_type_to")],
            [InlineKeyboardButton("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–¥–≤–µ—Å–∫–∏", callback_data="work_type_suspension")],
            [InlineKeyboardButton("üíª –ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", callback_data="work_type_computer")],
            [InlineKeyboardButton("üìè –†–∞–∑–≤–∞–ª-—Å—Ö–æ–∂–¥–µ–Ω–∏–µ", callback_data="work_type_alignment")],
            [InlineKeyboardButton("üìä –£–∑–Ω–∞—Ç—å –ø—Ä–æ–±–µ–≥ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è", callback_data="work_type_mileage_info")],
            [InlineKeyboardButton("‚úèÔ∏è –î—Ä—É–≥–æ–µ (–≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é)", callback_data="work_type_other")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        
        update.message.reply_text(
            f"–ü—Ä–æ–±–µ–≥: {mileage} –∫–º\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ä–∞–±–æ—Ç:",
            reply_markup=InlineKeyboardMarkup(buttons)
        )
        
        return FORM_WORK_TYPE
    except ValueError:
        update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–±–µ–≥ –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)."
        )
        return FORM_MILEAGE

def handle_mileage_admin_response(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–û—Ç–≤–µ—Ç–∏—Ç—å' –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –æ –ø—Ä–æ–±–µ–≥–µ"""
    query = update.callback_query
    query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback_data
    user_id = query.data.split('_')[2]  # mileage_respond_USER_ID
    user_id = int(user_id)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    context.user_data['mileage_response_user_id'] = user_id
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –∞–¥–º–∏–Ω–∞ –≤–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    query.message.edit_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–±–µ–≥–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¢–û:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_menu")]
        ])
    )
    
    return MILEAGE_RESPONSE_TEXT




def process_mileage_response_text(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –æ –ø—Ä–æ–±–µ–≥–µ"""
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    user_id = context.user_data.get('mileage_response_user_id')
    
    if not user_id:
        update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞.",
            reply_markup=create_main_menu_keyboard()
        )
        return MAIN_MENU
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∞
    response_text = update.message.text
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        context.bot.send_message(
            chat_id=user_id,
            text=f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–±–µ–≥–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¢–û:\n\n{response_text}"
        )
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∞–¥–º–∏–Ω—É, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        update.message.reply_text(
            "‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!",
            reply_markup=create_main_menu_keyboard()
        )
        
        logging.info(f"–û—Ç–≤–µ—Ç –æ –ø—Ä–æ–±–µ–≥–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except Exception as e:
        update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}",
            reply_markup=create_main_menu_keyboard()
        )
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –æ –ø—Ä–æ–±–µ–≥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if 'mileage_response_user_id' in context.user_data:
        del context.user_data['mileage_response_user_id']
    
    return MAIN_MENU




# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–∞–±–æ—Ç
def process_work_type(update: Update, context: CallbackContext) -> int:
    """Process work type selection from buttons"""
    query = update.callback_query
    query.answer()
    
    work_type = query.data.split('_', 2)[2]
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ä–∞–±–æ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    work_types = {
        "to": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ",
        "suspension": "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–¥–≤–µ—Å–∫–∏",
        "computer": "–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞",
        "alignment": "–†–∞–∑–≤–∞–ª-—Å—Ö–æ–∂–¥–µ–Ω–∏–µ",
        "mileage_info": "–£–∑–Ω–∞—Ç—å –ø—Ä–æ–±–µ–≥ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è",
        "other": None  # –î–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
    }
    
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –æ–ø—Ü–∏—è "–î—Ä—É–≥–æ–µ", –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –≤—Ä—É—á–Ω—É—é
    if work_type == "other":
        query.message.edit_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ, –∫–∞–∫–∏–µ —Ä–∞–±–æ—Ç—ã —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å:"
        )
        return FORM_WORK_MANUAL
    
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –æ–ø—Ü–∏—è "–£–∑–Ω–∞—Ç—å –ø—Ä–æ–±–µ–≥ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¢–û", –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º–µ
    if work_type == "mileage_info":
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø —Ä–∞–±–æ—Ç—ã
        context.user_data['requested_work'] = work_types[work_type]
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        user = data_store.get_user(update.effective_user.id)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram –≤–º–µ—Å—Ç–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        # –£—Å—Ç–∞–Ω–æ–≤–∏–º –±–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π
        context.user_data['preferred_date'] = "–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è"
        context.user_data['preferred_time'] = None
        context.user_data['phone'] = user.phone if user and user.phone else "–ù–µ —É–∫–∞–∑–∞–Ω"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        confirmation_text = (
            "üìã –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∑–∞—è–≤–∫–∏:\n\n"
            f"üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å: {context.user_data['car_model']}\n"
            f"üî¢ –ì–æ—Å. –Ω–æ–º–µ—Ä: {context.user_data['license_plate']}\n"
            f"üîÑ –¢–µ–∫—É—â–∏–π –ø—Ä–æ–±–µ–≥: {context.user_data['mileage']} –∫–º\n"
            f"üîß –ó–∞–ø—Ä–æ—Å: {context.user_data['requested_work']}\n\n"
            "–í—Å—ë –≤–µ—Ä–Ω–æ? –ú—ã –æ—Ç–ø—Ä–∞–≤–∏–º –∑–∞–ø—Ä–æ—Å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É, –∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç –ø—Ä—è–º–æ –≤ —ç—Ç–æ–º —á–∞—Ç–µ."
        )
        
        buttons = [
            [
                InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm"),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")
            ]
        ]
        
        query.message.edit_text(
            confirmation_text,
            reply_markup=InlineKeyboardMarkup(buttons)
        )
        
        return FORM_CONFIRM
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø —Ä–∞–±–æ—Ç—ã –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤
    context.user_data['requested_work'] = work_types[work_type]
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã
    now = datetime.datetime.now()
    available_dates = []
    
    # –ù–∞—Ö–æ–¥–∏–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–∏ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
    days_until_next_monday = 7 - now.weekday() if now.weekday() > 0 else 7
    next_monday = now + datetime.timedelta(days=days_until_next_monday)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞—Ç—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 2 –º–µ—Å—è—Ü–∞ (60 –¥–Ω–µ–π), –Ω–∞—á–∏–Ω–∞—è —Å–æ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–∏
    for i in range(60):
        date = next_monday + datetime.timedelta(days=i)
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–±–æ—Ä —Ç–æ–ª—å–∫–æ –≤—Ç–æ—Ä–Ω–∏–∫–æ–º, —Å—Ä–µ–¥–æ–π –∏ —á–µ—Ç–≤–µ—Ä–≥–æ–º
        if date.weekday() in [1, 2, 3]:  # 0 - –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 1 - –≤—Ç–æ—Ä–Ω–∏–∫, ...
            available_dates.append(date)
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –¥–∞—Ç–∞–º–∏
    buttons = []
    dates_per_row = 3
    date_buttons = []
    
    for date in available_dates[:18]:  # –û–≥—Ä–∞–Ω–∏—á–∏–º—Å—è –ø–µ—Ä–≤—ã–º–∏ 18 –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏
        formatted_date = date.strftime("%d.%m")
        day_names = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
        day_name = day_names[date.weekday()]
        button_text = f"{formatted_date} ({day_name})"
        date_key = date.strftime("%d.%m.%Y")
        date_buttons.append(InlineKeyboardButton(button_text, callback_data=f"date_{date_key}"))
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞—Ç—ã –ø–æ 3 –≤ —Ä—è–¥
        if len(date_buttons) == dates_per_row:
            buttons.append(date_buttons)
            date_buttons = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–∞—Ç—ã
    if date_buttons:
        buttons.append(date_buttons)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")])
    
    query.message.edit_text(
        f"–í—ã–±—Ä–∞–Ω —Ç–∏–ø —Ä–∞–±–æ—Ç: {work_types[work_type]}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—É—é –¥–∞—Ç—É –≤–∏–∑–∏—Ç–∞ (–≤—Ç–æ—Ä–Ω–∏–∫-—á–µ—Ç–≤–µ—Ä–≥):\n"
        "‚ùó –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ\n"
        "‚ùó –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ –±–ª–∏–∂–∞–π—à–∏–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        reply_markup=InlineKeyboardMarkup(buttons)
    )
    
    return FORM_SELECT_DATE

def process_work_manual(update: Update, context: CallbackContext) -> int:
    """Process manually entered work description"""
    work_description = update.message.text
    context.user_data['requested_work'] = work_description
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã
    now = datetime.datetime.now()
    available_dates = []
    
    # –ù–∞—Ö–æ–¥–∏–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–∏ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
    days_until_next_monday = 7 - now.weekday() if now.weekday() > 0 else 7
    next_monday = now + datetime.timedelta(days=days_until_next_monday)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞—Ç—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 2 –º–µ—Å—è—Ü–∞ (60 –¥–Ω–µ–π), –Ω–∞—á–∏–Ω–∞—è —Å–æ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–∏
    for i in range(60):
        date = next_monday + datetime.timedelta(days=i)
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–±–æ—Ä —Ç–æ–ª—å–∫–æ –≤—Ç–æ—Ä–Ω–∏–∫–æ–º, —Å—Ä–µ–¥–æ–π –∏ —á–µ—Ç–≤–µ—Ä–≥–æ–º
        if date.weekday() in [1, 2, 3]:  # 0 - –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 1 - –≤—Ç–æ—Ä–Ω–∏–∫, ...
            available_dates.append(date)
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –¥–∞—Ç–∞–º–∏
    buttons = []
    dates_per_row = 3
    date_buttons = []
    
    for date in available_dates[:18]:  # –û–≥—Ä–∞–Ω–∏—á–∏–º—Å—è –ø–µ—Ä–≤—ã–º–∏ 18 –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏
        formatted_date = date.strftime("%d.%m")
        day_names = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
        day_name = day_names[date.weekday()]
        button_text = f"{formatted_date} ({day_name})"
        date_key = date.strftime("%d.%m.%Y")
        date_buttons.append(InlineKeyboardButton(button_text, callback_data=f"date_{date_key}"))
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞—Ç—ã –ø–æ 3 –≤ —Ä—è–¥
        if len(date_buttons) == dates_per_row:
            buttons.append(date_buttons)
            date_buttons = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–∞—Ç—ã
    if date_buttons:
        buttons.append(date_buttons)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")])
    
    update.message.reply_text(
        f"–í—ã –≤–≤–µ–ª–∏: {work_description}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—É—é –¥–∞—Ç—É –≤–∏–∑–∏—Ç–∞ (–≤—Ç–æ—Ä–Ω–∏–∫-—á–µ—Ç–≤–µ—Ä–≥):\n"
        "‚ùó –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ\n"
        "‚ùó –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ –±–ª–∏–∂–∞–π—à–∏–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        reply_markup=InlineKeyboardMarkup(buttons)
    )
    
    return FORM_SELECT_DATE

def process_date_selection(update: Update, context: CallbackContext) -> int:
    """Process date selection from buttons"""
    query = update.callback_query
    query.answer()
    
    date_str = query.data.split('_', 1)[1]
    context.user_data['preferred_date'] = date_str
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    user = data_store.get_user(update.effective_user.id)
    saved_phone = user.phone if user and user.phone else None
    
    if saved_phone:
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä –º–µ–∂–¥—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º –∏ –Ω–æ–≤—ã–º –Ω–æ–º–µ—Ä–æ–º
        buttons = [
            [InlineKeyboardButton(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä: {saved_phone}", callback_data="use_saved_phone")],
            [InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä", callback_data="enter_new_phone")]
        ]
        
        query.message.edit_text(
            f"–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {context.user_data['preferred_date']}\n\n"
            "‚ùó –î–∞—Ç–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è\n"
            "‚ùó –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ –±–ª–∏–∂–∞–π—à–∏–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:",
            reply_markup=InlineKeyboardMarkup(buttons)
        )
        
        return FORM_PHONE_CHOICE
    else:
        # –ï—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –Ω–µ—Ç, –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –∫–∞–∫ –æ–±—ã—á–Ω–æ
        query.message.edit_text(
            f"–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {context.user_data['preferred_date']}\n\n"
            "‚ùó –î–∞—Ç–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è\n"
            "‚ùó –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ –±–ª–∏–∂–∞–π—à–∏–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:"
        )
        
        return FORM_PHONE

def process_time_selection(update: Update, context: CallbackContext) -> int:
    """Process time selection from buttons"""
    query = update.callback_query
    query.answer()
    
    time_str = query.data.split('_', 1)[1]
    context.user_data['preferred_time'] = time_str
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    user = data_store.get_user(update.effective_user.id)
    saved_phone = user.phone if user and user.phone else None
    
    if saved_phone:
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä –º–µ–∂–¥—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º –∏ –Ω–æ–≤—ã–º –Ω–æ–º–µ—Ä–æ–º
        buttons = [
            [InlineKeyboardButton(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä: {saved_phone}", callback_data="use_saved_phone")],
            [InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä", callback_data="enter_new_phone")]
        ]
        
        query.message.edit_text(
            f"–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {context.user_data['preferred_date']} –≤ {time_str}\n\n"
            "‚ùó –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ\n"
            "‚ùó –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ –±–ª–∏–∂–∞–π—à–∏–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:",
            reply_markup=InlineKeyboardMarkup(buttons)
        )
        
        return FORM_PHONE_CHOICE
    else:
        # –ï—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –Ω–µ—Ç, –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –∫–∞–∫ –æ–±—ã—á–Ω–æ
        query.message.edit_text(
            f"–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {context.user_data['preferred_date']} –≤ {time_str}\n\n"
            "‚ùó –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ\n"
            "‚ùó –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ –±–ª–∏–∂–∞–π—à–∏–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:"
        )
        
        return FORM_PHONE

def process_phone_choice(update: Update, context: CallbackContext) -> int:
    """Process phone number choice"""
    query = update.callback_query
    query.answer()
    
    if query.data == "use_saved_phone":
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = data_store.get_user(update.effective_user.id)
        if user and user.phone:
            context.user_data['phone'] = user.phone
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
            user_data = context.user_data
            
            confirmation_text = (
                "üìã –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∑–∞—è–≤–∫–∏:\n\n"
                f"üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å: {user_data['car_model']}\n"
                f"üî¢ –ì–æ—Å. –Ω–æ–º–µ—Ä: {user_data['license_plate']}\n"
                f"üîÑ –ü—Ä–æ–±–µ–≥: {user_data['mileage']} –∫–º\n"
                f"üîß –¢—Ä–µ–±—É–µ–º—ã–µ —Ä–∞–±–æ—Ç—ã: {user_data['requested_work']}\n"
                f"üìÖ –î–∞—Ç–∞: {user_data['preferred_date']} (–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ)\n"
                f"‚ùó –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ –±–ª–∏–∂–∞–π—à–∏–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user_data['phone']}\n\n"
                "–í—Å—ë –≤–µ—Ä–Ω–æ?"
            )
            
            buttons = [
                [
                    InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm"),
                    InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")
                ]
            ]
            
            query.message.edit_text(
                confirmation_text,
                reply_markup=InlineKeyboardMarkup(buttons)
            )
            
            return FORM_CONFIRM
    
    # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –≤—ã–±—Ä–∞–Ω–æ "–í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä"
    query.message.edit_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:"
    )
    return FORM_PHONE


def process_phone(update: Update, context: CallbackContext) -> int:
    """Save phone and show confirmation"""
    phone = update.message.text
    context.user_data['phone'] = phone
    
    return show_confirmation(update, context)

def show_confirmation(update: Update, context: CallbackContext) -> int:
    """Show the form summary and ask for confirmation"""
    user_data = context.user_data
    
    confirmation_text = (
        "üìã –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∑–∞—è–≤–∫–∏:\n\n"
        f"üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å: {user_data['car_model']}\n"
        f"üî¢ –ì–æ—Å. –Ω–æ–º–µ—Ä: {user_data['license_plate']}\n"
        f"üîÑ –ü—Ä–æ–±–µ–≥: {user_data['mileage']} –∫–º\n"
        f"üîß –¢—Ä–µ–±—É–µ–º—ã–µ —Ä–∞–±–æ—Ç—ã: {user_data['requested_work']}\n"
        f"üìÖ –î–∞—Ç–∞: {user_data['preferred_date']} (–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ)\n"
        f"‚ùó –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ –±–ª–∏–∂–∞–π—à–∏–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user_data['phone']}\n\n"
        "–í—Å—ë –≤–µ—Ä–Ω–æ?"
    )
    
    buttons = [
        [
            InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")
        ]
    ]
    
    if hasattr(update, 'message'):
        update.message.reply_text(
            confirmation_text,
            reply_markup=InlineKeyboardMarkup(buttons)
        )
    else:
        update.callback_query.message.edit_text(
            confirmation_text,
            reply_markup=InlineKeyboardMarkup(buttons)
        )
    
    return FORM_CONFIRM

def confirm_request(update: Update, context: CallbackContext) -> int:
    """Save the service request and notify admins"""
    query = update.callback_query
    query.answer()
    
    user_data = context.user_data
    user = update.effective_user
    db_user = data_store.get_user(user.id)
    
    # Create a new service request
    new_request = ServiceRequest(
        user_id=user.id,
        car_model=user_data['car_model'],
        license_plate=user_data['license_plate'],
        mileage=user_data['mileage'],
        requested_work=user_data['requested_work'],
        preferred_date=user_data['preferred_date'],
        preferred_time=None,  # –ë–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è
        phone=user_data['phone'],
        real_name=db_user.first_name if db_user else user.first_name,
        real_surname=db_user.last_name if db_user else user.last_name
    )
    
    # Save the request
    data_store.add_request(new_request)
    
    # Notify the user
    if user_data['requested_work'] == "–£–∑–Ω–∞—Ç—å –ø—Ä–æ–±–µ–≥ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è":
        query.message.edit_text(
            "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
            "üìä –ó–∞–ø—Ä–æ—Å –æ –ø—Ä–æ–±–µ–≥–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¢–û –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É.\n"
            "–û—Ç–≤–µ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞–º –∫–∞–∫ —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞.\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–∏ –∑–∞—è–≤–∫–∏'."
        )
    else:
        query.message.edit_text(
            "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
            f"üìÖ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –¥–∞—Ç–∞: {user_data['preferred_date']}\n"
            "‚ùó –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ –±–ª–∏–∂–∞–π—à–∏–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫.\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–∏ –∑–∞—è–≤–∫–∏'."
        )
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if user_data['requested_work'] == "–£–∑–Ω–∞—Ç—å –ø—Ä–æ–±–µ–≥ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è" and MILEAGE_ADMIN_ID:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –æ –ø—Ä–æ–±–µ–≥–µ —Ç–æ–ª—å–∫–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        try:
            context.bot.send_message(
                chat_id=MILEAGE_ADMIN_ID,
                text=(
                    "üìä –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–±–µ–≥–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¢–û!\n\n"
                    f"–û—Ç: {new_request.real_name} {new_request.real_surname if new_request.real_surname else ''}\n"
                    f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å: {new_request.car_model}\n"
                    f"–ì–æ—Å. –Ω–æ–º–µ—Ä: {new_request.license_plate}\n"
                    f"–¢–µ–∫—É—â–∏–π –ø—Ä–æ–±–µ–≥: {new_request.mileage} –∫–º\n"
                    f"–¢–µ–ª–µ—Ñ–æ–Ω: {new_request.phone}"
                ),
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏", callback_data=f"notification_view_{new_request.id}")]
                ])
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–±—ã—á–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ —Ç–æ–º, —á—Ç–æ –∑–∞—è–≤–∫–∞ —É—à–ª–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            for admin_id in ADMIN_IDS:
                if admin_id != MILEAGE_ADMIN_ID:  # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
                    context.bot.send_message(
                        chat_id=admin_id,
                        text=(
                            "üìä –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–±–µ–≥–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¢–û\n\n"
                            f"–û—Ç: {new_request.real_name} {new_request.real_surname if new_request.real_surname else ''}\n"
                            f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å: {new_request.car_model}\n"
                            f"–ì–æ—Å. –Ω–æ–º–µ—Ä: {new_request.license_plate}\n\n"
                            "–ó–∞–ø—Ä–æ—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –ø–æ –¢–û."
                        )
                    )
        except Exception as e:
            logging.error(f"Error notifying mileage admin: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            for admin_id in ADMIN_IDS:
                try:
                    context.bot.send_message(
                        chat_id=admin_id,
                        text=(
                            "üìä –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–±–µ–≥–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¢–û!\n\n"
                            f"–û—Ç: {new_request.real_name} {new_request.real_surname if new_request.real_surname else ''}\n"
                            f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å: {new_request.car_model}\n"
                            f"–ì–æ—Å. –Ω–æ–º–µ—Ä: {new_request.license_plate}\n"
                            f"–¢–µ–∫—É—â–∏–π –ø—Ä–æ–±–µ–≥: {new_request.mileage} –∫–º\n"
                            f"–¢–µ–ª–µ—Ñ–æ–Ω: {new_request.phone}\n\n"
                            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–ø—Ä–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –ø–æ –¢–û, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –∑–∞–ø—Ä–æ—Å."
                        ),
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏", callback_data=f"notification_view_{new_request.id}")]
                        ])
                    )
                except Exception as e:
                    logging.error(f"Error notifying admin {admin_id}: {e}")
    else:
        # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞—è–≤–æ–∫ —É–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        for admin_id in ADMIN_IDS:
            try:
                context.bot.send_message(
                    chat_id=admin_id,
                    text=(
                        "üì£ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!\n\n"
                        f"–û—Ç: {new_request.real_name} {new_request.real_surname if new_request.real_surname else ''}\n"
                        f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å: {new_request.car_model}\n"
                        f"–ì–æ—Å. –Ω–æ–º–µ—Ä: {new_request.license_plate}"
                    ),
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏", callback_data=f"notification_view_{new_request.id}")]
                    ])
                )
            except Exception as e:
                logging.error(f"Error notifying admin {admin_id}: {e}")
    
    # Clear the form data
    context.user_data.clear()
    
    return show_main_menu(update, context)

def cancel_request(update: Update, context: CallbackContext) -> int:
    """Cancel the request form"""
    query = update.callback_query
    query.answer()
    
    try:
        query.message.edit_text(
            "‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞."
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞—è–≤–∫–∏: {e}")
        # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        query.message.reply_text(
            "‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞."
        )
    
    # Clear the form data
    context.user_data.clear()
    
    return show_main_menu(update, context)

def show_my_requests(update: Update, context: CallbackContext) -> int:
    """Show the user's service requests"""
    query = update.callback_query
    query.answer()
    
    user_id = update.effective_user.id
    
    # Get user's requests
    user_requests = data_store.get_user_requests(user_id)
    
    if not user_requests:
        query.message.edit_text(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ.\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
            ])
        )
        return MAIN_MENU
    
    # Create buttons for each request
    buttons = []
    for request in sorted(user_requests, key=lambda r: r.created_at, reverse=True):
        status_emoji = {
            "pending": "‚è≥",
            "approved": "‚úÖ",
            "rejected": "‚ùå",
            "completed": "üèÅ"
        }.get(request.status, "‚ùì")
        
        date_created = request.created_at.strftime("%d.%m.%Y")
        
        buttons.append([
            InlineKeyboardButton(
                f"{status_emoji} {request.car_model} ({date_created})",
                callback_data=f"user_request_{request.id}"
            )
        ])
    
    buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")])
    
    query.message.edit_text(
        "–í–∞—à–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ:",
        reply_markup=InlineKeyboardMarkup(buttons)
    )
    
    return MY_REQUESTS

def show_request_details(update: Update, context: CallbackContext) -> int:
    """Show details of a specific request"""
    query = update.callback_query
    query.answer()
    
    request_id = query.data.split('_', 2)[2]
    request = data_store.get_request(request_id)
    
    if not request:
        query.message.edit_text(
            "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="my_requests")]
            ])
        )
        return MY_REQUESTS
    
    status_text = {
        "pending": "‚è≥ –û–∂–∏–¥–∞–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è",
        "approved": "‚úÖ –ü—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É",
        "rejected": "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞",
        "completed": "üèÅ –í—ã–ø–æ–ª–Ω–µ–Ω–∞"
    }.get(request.status, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    
    if request.requested_work == "–£–∑–Ω–∞—Ç—å –ø—Ä–æ–±–µ–≥ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è":
        details_text = (
            f"üìã –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ #{request.id[:8]}...\n\n"
            f"–°—Ç–∞—Ç—É—Å: {status_text}\n"
            f"–°–æ–∑–¥–∞–Ω: {request.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            f"üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å: {request.car_model}\n"
            f"üî¢ –ì–æ—Å. –Ω–æ–º–µ—Ä: {request.license_plate}\n"
            f"üîÑ –¢–µ–∫—É—â–∏–π –ø—Ä–æ–±–µ–≥: {request.mileage} –∫–º\n"
            f"üîç –¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–±–µ–≥–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¢–û\n"
        )
        if request.status == "pending":
            details_text += f"\n‚è≥ –í–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º.\n"
    else:
        details_text = (
            f"üìã –ó–∞—è–≤–∫–∞ #{request.id[:8]}...\n\n"
            f"–°—Ç–∞—Ç—É—Å: {status_text}\n"
            f"–°–æ–∑–¥–∞–Ω–∞: {request.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            f"üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å: {request.car_model}\n"
            f"üî¢ –ì–æ—Å. –Ω–æ–º–µ—Ä: {request.license_plate}\n"
            f"üîÑ –ü—Ä–æ–±–µ–≥: {request.mileage} –∫–º\n"
            f"üîß –¢—Ä–µ–±—É–µ–º—ã–µ —Ä–∞–±–æ—Ç—ã: {request.requested_work}\n"
            f"üìÖ –ñ–µ–ª–∞–µ–º–∞—è –¥–∞—Ç–∞: {request.preferred_date} (–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ)\n"
            f"‚ö†Ô∏è –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ –±–ª–∏–∂–∞–π—à–∏–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {request.phone}\n"
        )
    
    if request.admin_notes:
        details_text += f"\nüìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –º–∞—Å—Ç–µ—Ä–∞:\n{request.admin_notes}\n"
    
    buttons = []
    
    # –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –æ –ø—Ä–æ–±–µ–≥–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¢–û –∏ –µ—Å—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, 
    # —Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–±–µ–≥–µ
    if request.requested_work == "–£–∑–Ω–∞—Ç—å –ø—Ä–æ–±–µ–≥ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è" and request.admin_notes:
        details_text = details_text.replace("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –º–∞—Å—Ç–µ—Ä–∞:", "üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –¢–û:")
    
    buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∑–∞—è–≤–∫–∞–º", callback_data="my_requests")])
    
    query.message.edit_text(
        details_text,
        reply_markup=InlineKeyboardMarkup(buttons)
    )
    
    return MY_REQUESTS

def show_admin_menu(update: Update, context: CallbackContext) -> int:
    """Show the admin menu with options"""
    query = update.callback_query
    query.answer()
    
    buttons = [
        [InlineKeyboardButton("üì• –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏", callback_data="admin_requests_pending")],
        [InlineKeyboardButton("üèÅ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏", callback_data="admin_requests_completed")],
        [InlineKeyboardButton("üìä –ó–∞–ø—Ä–æ—Å—ã –æ –ø—Ä–æ–±–µ–≥–µ", callback_data="admin_mileage_requests")],
        [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    try:
        query.message.edit_text(
            "üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞—è–≤–æ–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
            reply_markup=InlineKeyboardMarkup(buttons)
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∞–¥–º–∏–Ω-–º–µ–Ω—é: {e}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        query.message.reply_text(
            "üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞—è–≤–æ–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
            reply_markup=InlineKeyboardMarkup(buttons)
        )
    
    return ADMIN_MENU

def show_admin_requests(update: Update, context: CallbackContext) -> int:
    """Show requests with a specific status to the admin"""
    query = update.callback_query
    query.answer()
    
    callback_data = query.data
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∫–∞–∑ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ –ø—Ä–æ–±–µ–≥–µ
    if callback_data == "admin_mileage_requests":
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –æ –ø—Ä–æ–±–µ–≥–µ –∏ –∏–º–µ—é—Ç —Å—Ç–∞—Ç—É—Å PENDING
        all_requests = data_store.get_all_requests()
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã: –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ –ø—Ä–æ–±–µ–≥–µ –∏ –∏–º–µ—Ç—å —Å—Ç–∞—Ç—É—Å PENDING
        mileage_requests = [
            r for r in all_requests 
            if r.requested_work == "–£–∑–Ω–∞—Ç—å –ø—Ä–æ–±–µ–≥ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è" and r.status == RequestStatus.PENDING.value
        ]
        
        if not mileage_requests:
            query.message.edit_text(
                "–ù–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –æ –ø—Ä–æ–±–µ–≥–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¢–û.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")]
                ])
            )
            return ADMIN_MENU
            
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã - –Ω–æ–≤–µ–π—à–∏–µ —Å–Ω–∞—á–∞–ª–∞
        mileage_requests.sort(key=lambda r: r.created_at, reverse=True)
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        buttons = []
        for request in mileage_requests:
            user = data_store.get_user(request.user_id)
            user_name = f"{user.first_name} {user.last_name}" if user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
            
            date_created = request.created_at.strftime("%d.%m.%Y")
            
            buttons.append([
                InlineKeyboardButton(
                    f"{request.car_model} - {user_name} ({date_created}) - {request.status}",
                    callback_data=f"admin_view_{request.id}"
                )
            ])
        
        buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")])
        
        try:
            query.message.edit_text(
                "–°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ –ø—Ä–æ–±–µ–≥–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¢–û:",
                reply_markup=InlineKeyboardMarkup(buttons)
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ø–∏—Å–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ –ø—Ä–æ–±–µ–≥–µ: {e}")
            query.message.reply_text(
                "–°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ –ø—Ä–æ–±–µ–≥–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¢–û:",
                reply_markup=InlineKeyboardMarkup(buttons)
            )
        
        return ADMIN_MENU
    
    # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å—É
    status = query.data.split('_')[-1]
    
    # Get requests by status
    # –î–ª—è –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ (pending) –∏—Å–∫–ª—é—á–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –æ –ø—Ä–æ–±–µ–≥–µ, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ó–∞–ø—Ä–æ—Å—ã –æ –ø—Ä–æ–±–µ–≥–µ"
    if status == "pending":
        all_pending = data_store.get_requests_by_status(status)
        # –§–∏–ª—å—Ç—Ä—É–µ–º, –∏—Å–∫–ª—é—á–∞—è –∑–∞–ø—Ä–æ—Å—ã –æ –ø—Ä–æ–±–µ–≥–µ
        requests_list = [r for r in all_pending if r.requested_work != "–£–∑–Ω–∞—Ç—å –ø—Ä–æ–±–µ–≥ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è"]
    else:
        requests_list = data_store.get_requests_by_status(status)
    
    status_text = {
        "pending": "–Ω–æ–≤—ã—Ö",
        "approved": "–æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö",
        "rejected": "–æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö",
        "completed": "–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö"
    }.get(status, "")
    
    if not requests_list:
        query.message.edit_text(
            f"–ù–µ—Ç {status_text} –∑–∞—è–≤–æ–∫.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")]
            ])
        )
        return ADMIN_MENU
    
    # Sort requests - newest first
    requests_list.sort(key=lambda r: r.created_at, reverse=True)
    
    # Create buttons for each request
    buttons = []
    for request in requests_list:
        user = data_store.get_user(request.user_id)
        user_name = f"{user.first_name} {user.last_name}" if user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
        
        date_created = request.created_at.strftime("%d.%m.%Y")
        
        buttons.append([
            InlineKeyboardButton(
                f"{request.car_model} - {user_name} ({date_created})",
                callback_data=f"admin_view_{request.id}"
            )
        ])
    
    buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")])
    
    try:
        query.message.edit_text(
            f"–°–ø–∏—Å–æ–∫ {status_text} –∑–∞—è–≤–æ–∫:",
            reply_markup=InlineKeyboardMarkup(buttons)
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫: {e}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        query.message.reply_text(
            f"–°–ø–∏—Å–æ–∫ {status_text} –∑–∞—è–≤–æ–∫:",
            reply_markup=InlineKeyboardMarkup(buttons)
        )
    
    return ADMIN_MENU

def admin_view_request(update: Update, context: CallbackContext) -> int:
    """Show request details to an admin with action buttons"""
    query = update.callback_query
    query.answer()
    
    logging.info(f"Processing admin_view_request with callback data: {query.data}")
    try:
        request_id = query.data.split('_', 2)[2]
        logging.info(f"Extracted request_id: {request_id}")
    except (IndexError, ValueError) as e:
        logging.error(f"Error extracting request_id from callback data '{query.data}': {e}")
        query.message.edit_text(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ID –∑–∞—è–≤–∫–∏.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")]
            ])
        )
        return ADMIN_MENU

    logging.info(f"Attempting to get request with ID: {request_id}")
    request = data_store.get_request(request_id)
    logging.info(f"Result from data_store.get_request: {request}")

    
    if not request:
        try:
            query.message.edit_text(
                "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")]
                ])
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ–Ω–∞–π–¥–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–µ: {e}")
            # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            query.message.reply_text(
                "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")]
                ])
            )
        return ADMIN_MENU
    
    # Get user information
    user = data_store.get_user(request.user_id)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º real_name –∏ real_surname –∏–∑ –∑–∞—è–≤–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if request.real_name and request.real_surname:
        user_name = f"{request.real_name} {request.real_surname}"
    elif request.real_name:  # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –∏–º—è
        user_name = request.real_name
    else:  # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_name = f"{user.first_name} {user.last_name}" if user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    status_text = {
        "pending": "‚è≥ –û–∂–∏–¥–∞–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è",
        "approved": "‚úÖ –ü—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É",
        "rejected": "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞",
        "completed": "üèÅ –í—ã–ø–æ–ª–Ω–µ–Ω–∞"
    }.get(request.status, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    
    if request.requested_work == "–£–∑–Ω–∞—Ç—å –ø—Ä–æ–±–µ–≥ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è":
        details_text = (
            f"üìä –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–±–µ–≥–µ #{request.id[:8]}...\n\n"
            f"–°—Ç–∞—Ç—É—Å: {status_text}\n"
            f"–°–æ–∑–¥–∞–Ω: {request.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            f"–ö–ª–∏–µ–Ω—Ç: {user_name}\n\n"
            f"üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å: {request.car_model}\n"
            f"üî¢ –ì–æ—Å. –Ω–æ–º–µ—Ä: {request.license_plate}\n"
            f"üîÑ –¢–µ–∫—É—â–∏–π –ø—Ä–æ–±–µ–≥: {request.mileage} –∫–º\n"
            f"üîç –¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–±–µ–≥–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¢–û\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {request.phone}\n"
        )
    else:
        details_text = (
            f"üìã –ó–∞—è–≤–∫–∞ #{request.id[:8]}...\n\n"
            f"–°—Ç–∞—Ç—É—Å: {status_text}\n"
            f"–°–æ–∑–¥–∞–Ω–∞: {request.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            f"–ö–ª–∏–µ–Ω—Ç: {user_name}\n\n"
            f"üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å: {request.car_model}\n"
            f"üî¢ –ì–æ—Å. –Ω–æ–º–µ—Ä: {request.license_plate}\n"
            f"üîÑ –ü—Ä–æ–±–µ–≥: {request.mileage} –∫–º\n"
            f"üîß –¢—Ä–µ–±—É–µ–º—ã–µ —Ä–∞–±–æ—Ç—ã: {request.requested_work}\n"
            f"üìÖ –ñ–µ–ª–∞–µ–º–∞—è –¥–∞—Ç–∞: {request.preferred_date} (–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ)\n"
            f"‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º –≤ –±–ª–∏–∂–∞–π—à–∏–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –ø–µ—Ä–µ–¥ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç–æ–π\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {request.phone}\n"
        )
    
    if request.admin_notes:
        details_text += f"\nüìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\n{request.admin_notes}\n"
    
    # Create action buttons based on current status
    buttons = []
    if request.requested_work == "–£–∑–Ω–∞—Ç—å –ø—Ä–æ–±–µ–≥ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è":
        if request.status == RequestStatus.PENDING.value:
            buttons.append([InlineKeyboardButton("üìä –û—Ç–≤–µ—Ç–∏—Ç—å –æ –ø—Ä–æ–±–µ–≥–µ", callback_data=f"mileage_response_{request.id}")])
            buttons.append([InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_mileage_{request.id}")])
        # –î–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –æ –ø—Ä–æ–±–µ–≥–µ –¥—Ä—É–≥–∏–µ –∫–Ω–æ–ø–∫–∏ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º, –∫—Ä–æ–º–µ "–ù–∞–∑–∞–¥"
    elif request.status == RequestStatus.PENDING.value:
        buttons.append([
            InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"approve_{request.id}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{request.id}")
        ])
        buttons.append([InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data=f"comment_{request.id}")])
    elif request.status == RequestStatus.APPROVED.value:
        buttons.append([
            InlineKeyboardButton("üèÅ –í—ã–ø–æ–ª–Ω–∏—Ç—å", callback_data=f"complete_{request.id}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{request.id}")
        ])
        buttons.append([InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data=f"comment_{request.id}")])
    elif request.status == RequestStatus.COMPLETED.value:
        buttons.append([
            InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{request.id}")
        ])
        # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º, —Ç.–∫. –µ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ
    
    buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")])
    
    try:
        query.message.edit_text(
            details_text,
            reply_markup=InlineKeyboardMarkup(buttons)
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞—è–≤–∫–∏: {e}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        query.message.reply_text(
            details_text,
            reply_markup=InlineKeyboardMarkup(buttons)
        )
    
    return ADMIN_MENU

def admin_update_request(update: Update, context: CallbackContext) -> int:
    """Handle request status updates (approve, reject, complete)"""
    query = update.callback_query
    query.answer()
    
    # –†–∞–∑–¥–µ–ª—è–µ–º callback_data, —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å reject_mileage
    parts = query.data.split('_', 1)
    action = parts[0]
    request_id = parts[1]

    if action == "reject" and request_id.startswith("mileage_"):
        action = "reject_mileage"
        request_id = request_id.split('_',1)[1]

    request = data_store.get_request(request_id)
    
    if not request:
        try:
            query.message.edit_text(
                "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")]
                ])
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ–Ω–∞–π–¥–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–µ: {e}")
            # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            query.message.reply_text(
                "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")]
                ])
            )
        return ADMIN_MENU
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–ø—Ä–æ—Å–∞ –≤ user_data –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    context.user_data['current_request_id'] = request_id
    context.user_data['action'] = action
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–µ–π—Å—Ç–≤–∏—è
    if action == "approve":
        message = "–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ü–†–ò–ù–Ø–¢–¨ –ó–ê–Ø–í–ö–£ –í –†–ê–ë–û–¢–£.\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ (–∏–ª–∏ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):"
    elif action == "complete":
        message = "–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞—è–≤–∫—É –∫–∞–∫ –í–´–ü–û–õ–ù–ï–ù–ù–£–Æ.\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞—Ö (–∏–ª–∏ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):"
    elif action == "reject":
        message = "–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –û–¢–ö–õ–û–ù–ò–¢–¨ –∑–∞—è–≤–∫—É.\n–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞ (–∏–ª–∏ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):"
    elif action == "reject_mileage":
        # –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –æ –ø—Ä–æ–±–µ–≥–µ –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        if request and request.requested_work == "–£–∑–Ω–∞—Ç—å –ø—Ä–æ–±–µ–≥ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è":
            request.status = RequestStatus.REJECTED.value
            updated = data_store.update_request(request)
            if updated:
                query.message.edit_text(
                    f"–ó–∞–ø—Ä–æ—Å –æ –ø—Ä–æ–±–µ–≥–µ #{request_id[:8]} –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω.",
                    reply_markup=InlineKeyboardMarkup([ 
                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", callback_data="admin_menu")]
                    ])
                )
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                context.bot.send_message(
                    chat_id=request.user_id,
                    text=f"–í–∞—à –∑–∞–ø—Ä–æ—Å –æ –ø—Ä–æ–±–µ–≥–µ –¥–ª—è {request.car_model} ({request.license_plate}) –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
                )
            else:
                query.message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏.")
            return ADMIN_MENU
        else:
            message = "–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –û–¢–ö–õ–û–ù–ò–¢–¨ –∑–∞—è–≤–∫—É.\n–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞:" # –≠—Ç–∞ –≤–µ—Ç–∫–∞ —Ç–µ–ø–µ—Ä—å –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∑–∞—è–≤–æ–∫
    elif action == "delete":
        message = "–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –£–î–ê–õ–ò–¢–¨ –∑–∞—è–≤–∫—É.\n–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É —É–¥–∞–ª–µ–Ω–∏—è (–∏–ª–∏ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):"
    elif action == "comment":
        message = "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—è–≤–∫–µ:"
    else:
        # –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–π —Å–ª—É—á–∞–π
        query.message.edit_text(
            "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")]
            ])
        )
        return ADMIN_MENU
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    # –î–ª—è –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –æ–ø—Ü–∏–∏
    query.message.edit_text(
        message,
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úñÔ∏è –ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è", callback_data=f"no_comment_{action}")],
            [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_menu")]
        ])
    )
    
    return ADMIN_NOTE

def save_admin_comment(update: Update, context: CallbackContext) -> int:
    """Save admin comment and update request status"""
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    request_id = context.user_data.get('current_request_id')
    action = context.user_data.get('action')
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –Ω–∞–∂–∞—Ç–∏–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è 
    # –∏–ª–∏ –≤–≤–æ–¥–æ–º —Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    if hasattr(update, 'callback_query') and update.callback_query:
        query = update.callback_query
        query.answer()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ callback_data, –µ—Å–ª–∏ request_id –∏ action –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        if not request_id or not action:
            action = query.data.split('_', 2)[2]  # no_comment_ACTION
            
        # –î–ª—è –¥–µ–π—Å—Ç–≤–∏—è "reject" –ø—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"
        if action == "reject" and query.data.startswith("no_comment_"):
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –ø—Ä–∏—á–∏–Ω—ã –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"
            notes = "–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
        else:
            # –î–ª—è –¥—Ä—É–≥–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏ –∫–Ω–æ–ø–æ–∫ –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è, –ø—Ä–æ—Å—Ç–æ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
            notes = ""
    else:
        # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        if update.message.text == "/skip":
            # –î–ª—è –¥–µ–π—Å—Ç–≤–∏—è "reject" —Ç–µ–ø–µ—Ä—å —Ç–∞–∫–∂–µ —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            if action == "reject":
                notes = "–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
            else:
                notes = ""
        else:
            # –ó–¥–µ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∫–∞–∫ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–∞–∑–∞
            notes = update.message.text
    
    # –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø—Ä–æ—Å
    request = data_store.get_request(request_id)
    
    if not request:
        if hasattr(update, 'callback_query') and update.callback_query:
            update.callback_query.message.edit_text(
                "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")]
                ])
            )
        else:
            update.message.reply_text(
                "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")]
                ])
            )
        return ADMIN_MENU
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    user_message = ""
    admin_message = ""
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–µ–π—Å—Ç–≤–∏—è
    if action == "approve":
        request.approve(notes)
        user_message = f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{request.id[:8]} –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É."
        admin_message = f"‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É."

    elif action == "reject":
        # –û—Ç–∫–ª–æ–Ω—è–µ–º –∑–∞—è–≤–∫—É, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –≤ —Å–∏—Å—Ç–µ–º–µ
        request.reject(notes)
        data_store.update_request(request)
        
        user_message = f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{request.id[:8]} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü—Ä–∏—á–∏–Ω–∞: {notes}"
        admin_message = f"‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞."
    elif action == "complete":
        request.complete(notes)
        user_message = f"üèÅ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{request.id[:8]} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞."
        admin_message = f"üèÅ –ó–∞—è–≤–∫–∞ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è."
    elif action == "delete":
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        request_id_short = request.id[:8]
        user_id = request.user_id
        car_model = request.car_model
        requested_work = request.requested_work
        preferred_date = request.preferred_date
        preferred_time = request.preferred_time
        
        # –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—è–µ–º –∑–∞—è–≤–∫—É –∏–∑ —Å–∏—Å—Ç–µ–º—ã
        data_store.delete_request(request.id)
        
        # –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è request —É–∂–µ –Ω–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ, –ø–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        user_message = f"üóëÔ∏è –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{request_id_short} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã."
        admin_message = f"üóëÔ∏è –ó–∞—è–≤–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã."
        
        # –û–±–Ω–æ–≤–ª—è–µ–º user_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        context.user_data['deleted_request_info'] = {
            'user_id': user_id,
            'request_id_short': request_id_short,
            'car_model': car_model,
            'requested_work': requested_work,
            'preferred_date': preferred_date,
            'preferred_time': preferred_time
        }
    elif action == "comment":
        request.admin_notes = notes
        data_store.update_request(request)
        user_message = f"üìù –ö –≤–∞—à–µ–π –∑–∞—è–≤–∫–µ #{request.id[:8]} –¥–æ–±–∞–≤–ª–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π."
        admin_message = f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —É–¥–∞–ª–µ–Ω–∞ –∑–∞—è–≤–∫–∞
    deleted_info = context.user_data.get('deleted_request_info')
    
    # –î–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ –∑–∞—è–≤–∫–∞ –ù–ï –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞
    if action != "delete":
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        data_store.update_request(request)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_message:
            time_str = f" –≤ {request.preferred_time}" if request.preferred_time and request.preferred_time != "–õ—é–±–æ–µ –≤—Ä–µ–º—è" else ""
            
            if request.requested_work == "–£–∑–Ω–∞—Ç—å –ø—Ä–æ–±–µ–≥ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è":
                context.bot.send_message(
                    chat_id=request.user_id,
                    text=(
                        f"{user_message}\n\n"
                        f"üöó {request.car_model}\n"
                        f"üî¢ {request.license_plate}\n"
                        f"{f'üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {notes}' if notes else ''}"
                    ),
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏", callback_data=f"user_request_{request.id}")]
                    ])
                )
            else:
                context.bot.send_message(
                    chat_id=request.user_id,
                    text=(
                        f"{user_message}\n\n"
                        f"üöó {request.car_model}\n"
                        f"üîß {request.requested_work}\n"
                        f"üìÖ {request.preferred_date}{time_str}\n"
                        f"{f'üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {notes}' if notes else ''}"
                    ),
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏", callback_data=f"user_request_{request.id}")]
                    ])
                )

    
    # –û—Ç–≤–µ—á–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    if hasattr(update, 'callback_query') and update.callback_query:
        update.callback_query.message.edit_text(
            f"{admin_message}"
        )
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞
        return admin_view_request(update, context)
    else:
        update.message.reply_text(
            f"{admin_message}"
        )
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π callback_query –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ admin_view_request
        class FakeUpdate:
            class FakeCallbackQuery:
                def __init__(self, data, message):
                    self.data = data
                    self.message = message
                
                def answer(self):
                    pass
            
            def __init__(self, original_update, data):
                self.callback_query = self.FakeCallbackQuery(data, original_update.message)
        
        fake_update = FakeUpdate(update, f"admin_view_{request_id}")
        return admin_view_request(fake_update, context)

def menu_command(update: Update, context: CallbackContext) -> int:
    """–ö–æ–º–∞–Ω–¥–∞ /menu –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –∏–∑ –ª—é–±–æ–≥–æ –º–µ—Å—Ç–∞"""
    return show_main_menu(update, context)

def handle_mileage_response(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –ø–æ –¢–û –Ω–∞ –∑–∞–ø—Ä–æ—Å –æ –ø—Ä–æ–±–µ–≥–µ"""
    query = update.callback_query
    query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–ø—Ä–æ—Å–∞
    request_id = query.data.split('_', 2)[2]  # mileage_response_ID
    request = data_store.get_request(request_id)
    
    if not request:
        try:
            query.message.edit_text(
                "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")]
                ])
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ–Ω–∞–π–¥–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–µ: {e}")
            query.message.reply_text(
                "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")]
                ])
            )
        return ADMIN_MENU
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–ø—Ä–æ—Å–∞ –∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    context.user_data['mileage_request_id'] = request_id
    context.user_data['mileage_response_user_id'] = request.user_id
    
    query.message.edit_text(
        f"üìä –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –æ –ø—Ä–æ–±–µ–≥–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¢–û\n\n"
        f"üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å: {request.car_model}\n"
        f"üî¢ –ì–æ—Å. –Ω–æ–º–µ—Ä: {request.license_plate}\n"
        f"üîÑ –¢–µ–∫—É—â–∏–π –ø—Ä–æ–±–µ–≥: {request.mileage} –∫–º\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –¢–û, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç—É:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_menu")]
        ])
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –æ—Ç–≤–µ—Ç–∞
    return MILEAGE_RESPONSE_TEXT

def handle_mileage_response_text(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –æ –ø—Ä–æ–±–µ–≥–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¢–û"""
    # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–ø—Ä–æ—Å–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    request_id = context.user_data.get('mileage_request_id')
    if not request_id:
        update.message.reply_text(
            "–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_menu")]
            ])
        )
        return ADMIN_MENU
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å
    request = data_store.get_request(request_id)
    if not request:
        update.message.reply_text(
            "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_menu")]
            ])
        )
        return ADMIN_MENU
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –æ –ø—Ä–æ–±–µ–≥–µ –∫–∞–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    mileage_info = update.message.text
    request.admin_notes = mileage_info
    # –°—Ä–∞–∑—É –ø–æ–º–µ—á–∞–µ–º –∑–∞—è–≤–∫—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
    request.status = RequestStatus.COMPLETED.value 
    data_store.update_request(request)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    try:
        context.bot.send_message(
            chat_id=request.user_id,
            text=(
                "üìä –ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–±–µ–≥–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¢–û:\n\n"
                f"üöó {request.car_model}\n"
                f"üî¢ {request.license_plate}\n\n"
                f"{mileage_info}"
            ),
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏", callback_data=f"user_request_{request.id}")]
            ])
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
        update.message.reply_text(
            f"‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}"
        )
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É, —á—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏ –∑–∞—è–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
    update.message.reply_text(
        "‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–±–µ–≥–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¢–û —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç—É, –∏ –∑–∞—è–≤–∫–∞ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è.",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_menu")]
        ])
    )
    
    # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    if 'mileage_request_id' in context.user_data:
        del context.user_data['mileage_request_id']
    if 'mileage_response_user_id' in context.user_data:
        del context.user_data['mileage_response_user_id']

    return ADMIN_MENU

def handle_notification_view(update: Update, context: CallbackContext) -> int:
    """Handle view request from notification buttons"""
    try:
        query = update.callback_query
        query.answer()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π –º–µ—Ç–æ–¥ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ID –∑–∞—è–≤–∫–∏
        callback_parts = query.data.split('_')
        if len(callback_parts) < 3:
            logging.error(f"Invalid callback data format: {query.data}")
            query.message.reply_text(
                "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏. –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
            return MAIN_MENU
            
        request_id = callback_parts[2]
        logging.info(f"Viewing notification for request: {request_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
        request = data_store.get_request(request_id)
        
        if not request:
            logging.error(f"Request not found: {request_id}")
            query.message.reply_text(
                "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")]
                ])
            )
            return ADMIN_MENU
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user = data_store.get_user(request.user_id)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º real_name –∏ real_surname –∏–∑ –∑–∞—è–≤–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if request.real_name and request.real_surname:
            user_name = f"{request.real_name} {request.real_surname}"
        elif request.real_name:  # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –∏–º—è
            user_name = request.real_name
        else:  # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_name = f"{user.first_name} {user.last_name}" if user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        status_text = {
            "pending": "‚è≥ –û–∂–∏–¥–∞–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è",
            "approved": "‚úÖ –û–¥–æ–±—Ä–µ–Ω–∞",
            "rejected": "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞",
            "completed": "üèÅ –í—ã–ø–æ–ª–Ω–µ–Ω–∞"
        }.get(request.status, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        
        time_str = f" –≤ {request.preferred_time}" if request.preferred_time and request.preferred_time != "–õ—é–±–æ–µ –≤—Ä–µ–º—è" else ""
        
        if request.requested_work == "–£–∑–Ω–∞—Ç—å –ø—Ä–æ–±–µ–≥ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è":
            details_text = (
                f"üìä –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–±–µ–≥–µ #{request.id[:8]}...\n\n"
                f"–°—Ç–∞—Ç—É—Å: {status_text}\n"
                f"–°–æ–∑–¥–∞–Ω: {request.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                f"–ö–ª–∏–µ–Ω—Ç: {user_name}\n\n"
                f"üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å: {request.car_model}\n"
                f"üî¢ –ì–æ—Å. –Ω–æ–º–µ—Ä: {request.license_plate}\n"
                f"üîÑ –¢–µ–∫—É—â–∏–π –ø—Ä–æ–±–µ–≥: {request.mileage} –∫–º\n"
                f"üîç –¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–±–µ–≥–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¢–û\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {request.phone}\n"
            )
        else:
            details_text = (
                f"üìã –ó–∞—è–≤–∫–∞ #{request.id[:8]}...\n\n"
                f"–°—Ç–∞—Ç—É—Å: {status_text}\n"
                f"–°–æ–∑–¥–∞–Ω–∞: {request.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                f"–ö–ª–∏–µ–Ω—Ç: {user_name}\n\n"
                f"üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å: {request.car_model}\n"
                f"üî¢ –ì–æ—Å. –Ω–æ–º–µ—Ä: {request.license_plate}\n"
                f"üîÑ –ü—Ä–æ–±–µ–≥: {request.mileage} –∫–º\n"
                f"üîß –¢—Ä–µ–±—É–µ–º—ã–µ —Ä–∞–±–æ—Ç—ã: {request.requested_work}\n"
                f"üìÖ –ñ–µ–ª–∞–µ–º–∞—è –¥–∞—Ç–∞: {request.preferred_date}{time_str} (–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ)\n"
                f"‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º –≤ –±–ª–∏–∂–∞–π—à–∏–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –ø–µ—Ä–µ–¥ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç–æ–π\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {request.phone}\n"
            )
        
        if request.admin_notes:
            details_text += f"\nüìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\n{request.admin_notes}\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –∏ —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
        buttons = []
        
        # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –æ –ø—Ä–æ–±–µ–≥–µ (—Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å–º–æ—Ç—Ä)
        if request.requested_work != "–£–∑–Ω–∞—Ç—å –ø—Ä–æ–±–µ–≥ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è":
            if request.status == RequestStatus.PENDING.value:
                buttons.append([
                    InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"approve_{request.id}"),
                    InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{request.id}")
                ])
            elif request.status == RequestStatus.APPROVED.value:
                buttons.append([
                    InlineKeyboardButton("üèÅ –í—ã–ø–æ–ª–Ω–µ–Ω–∞", callback_data=f"complete_{request.id}"),
                    InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{request.id}")
                ])
            
            # –î–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∑–∞–ø—Ä–æ—Å –æ –ø—Ä–æ–±–µ–≥–µ
            buttons.append([InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data=f"comment_{request.id}")])
        buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")])
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ edit_text
        try:
            query.message.edit_text(
                details_text,
                reply_markup=InlineKeyboardMarkup(buttons)
            )
        except Exception as edit_error:
            logging.error(f"Error editing message: {edit_error}")
            # –ï—Å–ª–∏ edit_text –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            query.message.reply_text(
                details_text,
                reply_markup=InlineKeyboardMarkup(buttons)
            )
            
        logging.info(f"Successfully displayed request details for {request_id}")
        return ADMIN_MENU
        
    except Exception as e:
        logging.error(f"Error in handle_notification_view: {e}")
        try:
            update.callback_query.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
        except:
            # –ö—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Å–æ–≤—Å–µ–º –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
            pass
        return MAIN_MENU

def cancel(update: Update, context: CallbackContext) -> int:
    """Cancel the conversation"""
    try:
        user = update.message.from_user
        update.message.reply_text(
            f"–î–æ —Å–≤–∏–¥–∞–Ω–∏—è, {user.first_name}! –ù–∞–¥–µ–µ–º—Å—è —É–≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞."
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –¥–∏–∞–ª–æ–≥–∞: {e}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –º–æ–ª—á–∞ –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥
    
    return ConversationHandler.END

def register_handlers(dispatcher):
    # Main conversation handler
    dispatcher.add_handler(CallbackQueryHandler(handle_mileage_admin_response, pattern=r'^mileage_respond_\d+$'))
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("start", start),
            CommandHandler("menu", menu_command),
            MessageHandler(Filters.regex("^üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é$"), handle_main_menu_button),
            CallbackQueryHandler(start_new_request, pattern="^new_request$"),
            CallbackQueryHandler(show_my_requests, pattern="^my_requests$"),
            CallbackQueryHandler(show_admin_menu, pattern="^admin_menu$"),
            CallbackQueryHandler(show_main_menu, pattern="^main_menu$"),
        ],
        states={
            None: [
                CallbackQueryHandler(start_new_request, pattern="^new_request$"),
                CallbackQueryHandler(show_my_requests, pattern="^my_requests$"),
                CallbackQueryHandler(show_admin_menu, pattern="^admin_menu$"),
                CallbackQueryHandler(show_main_menu, pattern="^main_menu$"),
                CallbackQueryHandler(handle_notification_view, pattern="^notification_view_"),
                CallbackQueryHandler(admin_view_request, pattern="^admin_view_"),
                CallbackQueryHandler(admin_update_request, pattern="^approve_"),
                CallbackQueryHandler(admin_update_request, pattern="^reject_"),
                CallbackQueryHandler(admin_update_request, pattern="^complete_"),
                CallbackQueryHandler(admin_update_request, pattern="^delete_"),
                CallbackQueryHandler(admin_update_request, pattern="^comment_"),
                CallbackQueryHandler(handle_mileage_response, pattern="^mileage_response_"),
                CallbackQueryHandler(show_request_details, pattern="^user_request_"),
                CallbackQueryHandler(save_admin_comment, pattern="^no_comment_"),
                CallbackQueryHandler(register_callback, pattern="^register$"),
            ],
            START: [
                CallbackQueryHandler(register_callback, pattern='^register$'),
                CallbackQueryHandler(show_main_menu, pattern="^main_menu$"),
            ],
            REGISTER_NAME: [
                MessageHandler(Filters.text & ~Filters.command, register_name)
            ],
            REGISTER_SURNAME: [
                MessageHandler(Filters.text & ~Filters.command, register_surname),
            ],
            REGISTER: [
                MessageHandler(Filters.contact | Filters.text & ~Filters.command, register_phone),
            ],
            MAIN_MENU: [
                CallbackQueryHandler(start_new_request, pattern="^new_request$"),
                CallbackQueryHandler(show_my_requests, pattern="^my_requests$"),
                CallbackQueryHandler(show_admin_menu, pattern="^admin_menu$"),
                CallbackQueryHandler(show_main_menu, pattern="^main_menu$"),
                CallbackQueryHandler(handle_notification_view, pattern="^notification_view_"),
                MessageHandler(Filters.regex("^üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é$"), handle_main_menu_button),
            ],
            FORM_CAR_BRAND: [
                CallbackQueryHandler(process_car_brand, pattern="^brand_"),
                CallbackQueryHandler(show_main_menu, pattern="^main_menu$"),
                CallbackQueryHandler(handle_notification_view, pattern="^notification_view_"),
            ],
            FORM_CAR_MODEL: [
                CallbackQueryHandler(process_car_model_selection, pattern="^model_"),
                CallbackQueryHandler(start_new_request, pattern="^new_request$"),
                CallbackQueryHandler(handle_notification_view, pattern="^notification_view_"),
            ],
            FORM_MODEL_MANUAL: [
                MessageHandler(Filters.text & ~Filters.command, process_model_manual),
            ],
            FORM_CAR_YEAR: [
                CallbackQueryHandler(process_car_year, pattern="^year_"),
                CallbackQueryHandler(start_new_request, pattern="^new_request$"),
                CallbackQueryHandler(handle_notification_view, pattern="^notification_view_"),
            ],
            FORM_LICENSE_PLATE: [
                MessageHandler(Filters.text & ~Filters.command, process_license_plate),
            ],
            FORM_MILEAGE: [
                MessageHandler(Filters.text & ~Filters.command, process_mileage),
            ],
            FORM_WORK_TYPE: [
                CallbackQueryHandler(process_work_type, pattern="^work_type_"),
                CallbackQueryHandler(show_main_menu, pattern="^main_menu$"),
                CallbackQueryHandler(handle_notification_view, pattern="^notification_view_"),
            ],
            FORM_WORK_MANUAL: [
                MessageHandler(Filters.text & ~Filters.command, process_work_manual),
            ],
            FORM_SELECT_DATE: [
                CallbackQueryHandler(process_date_selection, pattern=r'^date_')
            ],
            FORM_PHONE_CHOICE: [
                CallbackQueryHandler(process_phone_choice, pattern=r'^use_saved_phone$'),
                CallbackQueryHandler(process_phone_choice, pattern=r'^enter_new_phone$'),
                CallbackQueryHandler(handle_notification_view, pattern=r'^notification_view_'),
            ],
            FORM_PHONE: [
                MessageHandler(Filters.text & ~Filters.command, process_phone),
            ],
            FORM_CONFIRM: [
                CallbackQueryHandler(confirm_request, pattern="^confirm$"),
                CallbackQueryHandler(cancel_request, pattern="^cancel$"),
                CallbackQueryHandler(handle_notification_view, pattern="^notification_view_"),
            ],
            MY_REQUESTS: [
                CallbackQueryHandler(show_request_details, pattern="^user_request_"),
                CallbackQueryHandler(show_main_menu, pattern="^main_menu$"),
                CallbackQueryHandler(show_my_requests, pattern="^my_requests$"),
                CallbackQueryHandler(handle_notification_view, pattern="^notification_view_"),
            ],
            ADMIN_MENU: [
                CallbackQueryHandler(show_admin_menu, pattern="^admin_menu$"),
                CallbackQueryHandler(show_admin_requests, pattern="^admin_requests_"),
                CallbackQueryHandler(show_admin_requests, pattern="^admin_mileage_requests$"),
                CallbackQueryHandler(admin_view_request, pattern="^admin_view_"),
                CallbackQueryHandler(admin_update_request, pattern="^approve_"),
                CallbackQueryHandler(admin_update_request, pattern="^reject_"),
                CallbackQueryHandler(admin_update_request, pattern="^complete_"),
                CallbackQueryHandler(admin_update_request, pattern="^delete_"),
                CallbackQueryHandler(admin_update_request, pattern="^comment_"),
                CallbackQueryHandler(handle_mileage_response, pattern="^mileage_response_"),
                CallbackQueryHandler(handle_notification_view, pattern="^notification_view_"),
                CallbackQueryHandler(show_main_menu, pattern="^main_menu$"),
            ],
            ADMIN_NOTE: [
                MessageHandler(Filters.text & ~Filters.command, save_admin_comment),
                CommandHandler("skip", save_admin_comment),
                CallbackQueryHandler(save_admin_comment, pattern="^no_comment_"),
                CallbackQueryHandler(show_admin_menu, pattern="^admin_menu$"),
                CallbackQueryHandler(handle_notification_view, pattern="^notification_view_"),
            ],
            MILEAGE_RESPONSE_TEXT: [
                MessageHandler(Filters.text & ~Filters.command, process_mileage_response_text),
                CallbackQueryHandler(show_admin_menu, pattern=r'^admin_menu$')
            ],
        },
        fallbacks=[
            CommandHandler("cancel", cancel),
            MessageHandler(Filters.regex("^üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é$"), handle_main_menu_button),
        ],
        per_chat=False,
        name="autoservice_bot",
        persistent=False,
    )
    
    dispatcher.add_handler(conv_handler)